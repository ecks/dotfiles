#!/usr/bin/env bash
###############################################################################
#       _               _         _   _        __ _                           #
#      | |__   ___ _ __| |__  ___| |_| |_   _ / _| |_ _      _ _ __ ___       #
#      | '_ \ / _ \ '__| '_ \/ __| __| | | | | |_| __| \ /\ / | '_ ` _ \      #
#      | | | |  __/ |  | |_) \__ \ |_| | |_| |  _| |_ \ V  V /| | | | | |     #
#      |_| |_|\___|_|  |_.__/|___/\__|_|\__,_|_|  \__| \_/\_/ |_| |_| |_|     #
#                                                                             #
###############################################################################
# Initialise                                                                {{{
#------------------------------------------------------------------------------

hc() {
    herbstclient "$@"
}

is_first_start() {
    ! hc silent get_attr my_loaded 2>/dev/null
}

CONFD=~/.config/herbstluftwm

hc emit_hook reload

feh --bg-scale ~/Pictures/Wallpaper/vimCheatSheet.png

# remove all existing keybindings
hc keyunbind --all

# keybindings
#  * based on dvorak keyboard (will not make sense on qwerty)
# if you have a super key you will be much happier with Mod set to Mod4
#Mod=Mod1    # Use alt as the main modifier
Mod=Mod4   # Use the super key as the main modifier

# us: i, dv: c -- keycode  31 = i I c C Cyrillic_sha Cyrillic_SHA
hc keybind $Mod-Shift-i quit
# us: o, dv: r -- keycode  32 = o O r R Cyrillic_shcha Cyrillic_SHCHA
hc keybind $Mod-Shift-o reload
# su: x, dv: q -- keycode  53 = x X q Q Cyrillic_che Cyrillic_CHE
hc keybind $Mod-Shift-x close
hc keybind $Mod-Return spawn ${TERMINAL:-xterm} # use your $TERMINAL with xterm as fallback

# basic movement

maximize=$CONFD/maximize.sh
# us: slash, dv: z -- keycode  61 = slash question z Z period comma
hc keybind $Mod-slash spawn $maximize


focus_maximized=$CONFD/focus_maximized.sh
# focusing clients
hc keybind $Mod-Left  focus left
hc keybind $Mod-Down  focus down
hc keybind $Mod-Up    focus up
hc keybind $Mod-Right focus right
# us: j, dv: h -- keycode  44 = j J h H Cyrillic_o Cyrillic_O
hc keybind $Mod-j     spawn $focus_maximized left
# us: c, dv: j -- keycode  54 = c C j J Cyrillic_es Cyrillic_ES
hc keybind $Mod-c     spawn $focus_maximized down
# us: v, dv: k -- keycode  55 = v V k K Cyrillic_em Cyrillic_EM
hc keybind $Mod-v     spawn $focus_maximized up
# us: p, dv: l -- keycode  33 = p P l L Cyrillic_ze Cyrillic_ZE
hc keybind $Mod-p     spawn $focus_maximized right

# moving clients
hc keybind $Mod-Shift-Left  shift left
hc keybind $Mod-Shift-Down  shift down
hc keybind $Mod-Shift-Up    shift up
hc keybind $Mod-Shift-Right shift right
hc keybind $Mod-Shift-j     shift left
hc keybind $Mod-Shift-c     shift down
hc keybind $Mod-Shift-v     shift up
hc keybind $Mod-Shift-p     shift right

# splitting frames
# create an empty frame at the specified direction
# us: apostrophe, dv: minus -- keycode  48 = apostrophe quotedbl minus underscore Cyrillic_e Cyrillic_E
hc keybind $Mod-apostrophe       split   bottom  0.5
# keycode  51 = backslash bar backslash bar backslash slash
hc keybind $Mod-Shift-backslash  split   right   0.5
# let the current frame explode into subframes
hc keybind $Mod-Control-space split explode

# resizing frames
resizestep=0.05
hc keybind $Mod-Control-j       resize left +$resizestep
hc keybind $Mod-Control-c       resize down +$resizestep
hc keybind $Mod-Control-v       resize up +$resizestep
hc keybind $Mod-Control-p       resize right +$resizestep
hc keybind $Mod-Control-Left    resize left +$resizestep
hc keybind $Mod-Control-Down    resize down +$resizestep
hc keybind $Mod-Control-Up      resize up +$resizestep
hc keybind $Mod-Control-Right   resize right +$resizestep

# tags
tag_names=( {1..9} )
tag_keys=( {1..9} 0 )

goto_prev_tag=$CONFD/goto_prev_tag.sh

hc rename default "${tag_names[0]}" || true
for i in ${!tag_names[@]} ; do
    hc add "${tag_names[$i]}"
    key="${tag_keys[$i]}"
    if ! [ -z "$key" ] ; then
        hc keybind "$Mod-$key" spawn $goto_prev_tag "$i"
        hc keybind "$Mod-Shift-$key" move_index "$i"
    fi
done

# dmenu
# us: h, dv: d -- keycode  43 = h H d D Cyrillic_er Cyrillic_ER
hc keybind $Mod-h spawn dmenu_run_hlwm

# cycle through tags
hc keybind $Mod-period use_index +1 --skip-visible
hc keybind $Mod-comma  use_index -1 --skip-visible

# layouting
# us: s, dv: o -- keycode  39 = s S o O Cyrillic_yeru Cyrillic_YERU
hc keybind $Mod-s remove
hc keybind $Mod-; floating toggle
hc keybind $Mod-y fullscreen toggle
hc keybind $Mod-r pseudotile toggle

# The following cycles through the available layouts within a frame, but skips
# layouts, if the layout change wouldn't affect the actual window positions.
# I.e. if there are two windows within a frame, the grid layout is skipped.
hc keybind $Mod-space                                                           \
            or , and . compare tags.focus.curframe_wcount = 2                   \
                     . cycle_layout +1 vertical horizontal max vertical grid    \
               , cycle_layout +1


hc keybind XF86MonBrightnessDown spawn xbacklight -dec 10
hc keybind XF86MonBrightnessUp   spawn xbacklight -inc 10

# mouse
hc mouseunbind --all
hc mousebind $Mod-Button1 move
hc mousebind $Mod-Button2 zoom
hc mousebind $Mod-Button3 resize

# focus
hc keybind $Mod-BackSpace   cycle_monitor
hc keybind $Mod-Shift-BackSpace cycle_monitor -1
hc keybind $Mod-Tab         cycle_all +1
hc keybind $Mod-Shift-Tab   cycle_all -1
hc keybind $Mod-grave cycle
hc keybind $Mod-i jumpto urgent

# theme
hc attr theme.tiling.reset 1
hc attr theme.floating.reset 1
#hc set frame_border_active_color '#222222'
hc set frame_border_active_color '#6272a4'
#hc set frame_border_normal_color '#101010'
hc set frame_border_normal_color '#282a36'
#hc set frame_bg_normal_color '#565656'
hc set frame_bg_normal_color '#bd93f9'
#hc set frame_bg_active_color '#345F0C'
hc set frame_bg_active_color '#6272a4'
hc set frame_border_width 1
#hc set always_show_frame 1
hc set always_show_frame 1
hc set frame_bg_transparent 1
hc set frame_transparent_width 5
hc set frame_gap 4

#hc attr theme.active.color '#9fbc00'
hc attr theme.active.color '#6272a4'
#hc attr theme.normal.color '#454545'
hc attr theme.normal.color '#282a36'
hc attr theme.urgent.color orange
hc attr theme.inner_width 0
hc attr theme.outer_width 0
#hc attr theme.inner_color black
hc attr theme.inner_color '#282a36'
hc attr theme.outer_color '#282a36'
hc attr theme.border_width 6
hc attr theme.floating.border_width 4
hc attr theme.floating.outer_width 1
hc attr theme.floating.outer_color black
#hc attr theme.active.inner_color '#3E4A00'
hc attr theme.active.inner_color '#6272a4'
#hc attr theme.active.outer_color '#3E4A00'
hc attr theme.active.outer_color '#6272a4'
hc attr theme.background_color '#141414'

hc set window_gap 0
hc set frame_padding 0
hc set smart_window_surroundings 0
hc set smart_frame_surroundings 1
hc set mouse_recenter_gap 0

# if you're monitor issues, comment this line out,
# reload, set your monitors, then run 
# "hc detect_monitors" from cli manually
hc set auto_detect_monitors true

# rules
hc unrule -F

hc rule class=Termite     tag=1 focus=on # move all xterms to tag 3
hc rule class=Firefox     tag=2
hc rule class=qutebrowser tag=2
hc rule class=Slack       tag=3
hc rule class=zoom        tag=4
hc rule class=keepassxc   tag=4

hc rule focus=on # normally focus new clients
#hc rule focus=off # normally do not focus new clients
# give focus to most common terminals
#hc rule class~'(.*[Rr]xvt.*|.*[Tt]erm|Konsole)' focus=on
hc rule windowtype~'_NET_WM_WINDOW_TYPE_(DIALOG|UTILITY|SPLASH)' pseudotile=on
hc rule windowtype='_NET_WM_WINDOW_TYPE_DIALOG' focus=on
hc rule windowtype~'_NET_WM_WINDOW_TYPE_(NOTIFICATION|DOCK|DESKTOP)' manage=off

hc set tree_style '╾│ ├└╼─┐'

# unlock, just to be sure
hc unlock

# screen lock
# us: z, dv: semicolon -- keycode  52 = z Z semicolon colon dead_ogonek dead_doubleacute Cyrillic_ya Cyrillic_YA
hc keybind $Mod-z spawn $CONFD/i3lock.sh

# do multi monitor setup here, e.g.:
# hc set_monitors 1280x1024+0+0 1280x1024+1280+0
# or simply:
#hc detect_monitors

"$CONFD/toggle_ultrasplit.sh"


primary=$(xrandr --listmonitors | grep -v "Monitors" | grep "\*" | awk '{print $1}' | tr -d ':')
# find the panel
panel=$CONFD/panel.sh
[ -x "$panel" ] || panel=/etc/xdg/herbstluftwm/panel.sh
for monitor in $(herbstclient list_monitors | cut -d: -f1) ; do
    # start it on primary monitor only
    if [[ $monitor == "$primary" ]]; then
        "$panel" "$monitor" &
    else
        BARPYRUS_CONFIG=~/.config/barpyrus/config_minimal.py "$panel" "$monitor" &
    fi
done

if is_first_start; then
    hc new_attr bool my_loaded true

    ultrawide=$(hc detect_monitors -l | grep "3440x1440" | wc -l)
    if [[ $ultrawide == "1" ]]; then
        hc new_attr bool my_ultrasplit true
    fi

    slack &
    nm-applet &
fi
